#!/usr/bin/env bash
set -e
set -o pipefail
set -x

# TODO genenralize.  nvim setup
export TARGET_USER=$(whoami)

# Choose a user account to use for this installation
get_user() {
  if [ -z "${TARGET_USER-}" ]; then
    mapfile -t options < <(find /home/* -maxdepth 0 -printf "%f\\n" -type d)
    # if there is only one option just use that user
    if [ "${#options[@]}" -eq "1" ]; then
      readonly TARGET_USER="${options[0]}"
      echo "Using user account: ${TARGET_USER}"
      return
    fi

    # iterate through the user options and print them
    PS3='command -v user account should be used? '

    select opt in "${options[@]}"; do
      readonly TARGET_USER=$opt
      break
    done
  fi
}

check_is_sudo() {
  if [ "$EUID" -ne 0 ]; then
    echo "Please run as root."
    exit
  fi
}

function is_bin_in_path {
  builtin type -P "$1" &> /dev/null
}

update_rust() {
  echo
  echo "Updating rust..."
  echo

  if [ ! -z $(command -v rustup) ]; then
    rustup update
  else
    echo "Rust not found, installing..."
    install_rust
  fi
}

install_rust() {
  echo
  echo "Installing rust..."
  echo
  (
    curl https://sh.rustup.rs -sSf | RUSTUP_INIT_SKIP_PATH_CHECK=yes sh -s -- -y
    PATH=${HOME}/.cargo/bin:$PATH
    rustup component add rls rust-analysis rust-src
    rustup install beta
    rustup install nightly
    rustup +nightly component add rust-analyzer-preview rust-src
    source ${HOME}/.cargo/env
    is_bin_in_path i3 && cargo install xidlehook --bins
    is_bin_in_path i3 && cargo install i3-auto-layout
    set +e
    cargo install \
      navi \
      eza \
      fnm \
      cargo-update \
      ripgrep \
      bat \
      du-dust \
      sd \
      pastel \
      topgrade \
      zoxide \
      git-delta \
      gping \
      jless \
      spotify-tui \
      silicon \
      fd-find
    cargo install starship --locked
  )
}

install_golang() {
  echo
  echo "Installing golang..."
  echo
  export GO_VERSION
  GO_VERSION=$(curl -sSL "https://golang.org/VERSION?m=text")
  export GO_SRC=/usr/local/go

  # if we are passing the version
  if [[ -n "$1" ]]; then
    GO_VERSION=$1
  fi

  # purge old src
  if [[ -d "$GO_SRC" ]]; then
    sudo rm -rf "$GO_SRC"
    sudo rm -rf "$GOPATH"
  fi

  GO_VERSION=${GO_VERSION#go}

  # subshell
  (
    kernel=$(uname -s | tr '[:upper:]' '[:lower:]')
    curl -sSL "https://storage.googleapis.com/golang/go${GO_VERSION}.${kernel}-amd64.tar.gz" | sudo tar -v -C /usr/local -xz
    local user="$TARGET_USER"
    # rebuild stdlib for faster builds
    sudo chown -R "${user}" /usr/local/go/pkg
    export PATH=/usr/local/go/bin:${PATH}
    CGO_ENABLED=0 go install -a -installsuffix cgo std
  )

  export PATH=/usr/local/go/bin:${GOPATH}/bin:${PATH}
  (
    set -x
    # go get returns non zereo on some cases that we do not want to abort on
    set +e
    go install golang.org/x/lint/golint@latest
    go install golang.org/x/tools/cmd/cover@latest
    go install golang.org/x/tools/cmd/gopls@latest
    go install golang.org/x/review/git-codereview@latest
    go install golang.org/x/tools/cmd/goimports@latest
    go install golang.org/x/tools/cmd/gorename@latest
    go install golang.org/x/tools/cmd/guru@latest

    go install github.com/axw/gocov/gocov@latest
    go install honnef.co/go/tools/cmd/staticcheck@latest
    go install github.com/genuinetools/weather@latest

    go install github.com/wagoodman/dive@latest

    # Tools for vimgo.@latest
    go install github.com/jstemmer/gotags@latest
    go install github.com/nsf/gocode@latest
    go install github.com/rogpeppe/godef@latest
    go install -u github.com/sourcegraph/go-langserver@latest
    go install github.com/sachaos/viddy@latest

    # symlink weather binary for motd
    sudo ln -snf "${GOPATH}/bin/weather" /usr/local/bin/weather
  )
}

install_dotfiles() {
  # create subshell
  (
    cd "$HOME"

    if [[ ! -d "${HOME}/.dotfiles" ]]; then
      echo "Installing dotfiles branch ${DOTFILESBRANCH}"
      rm -f ~/.zshrc
      DOTFILESBRANCH=${DOTFILESBRANCH:-main}
      # install dotfiles from repo
      export GIT_DIR="${HOME}/.dotfiles"
      export GIT_WORK_TREE="${HOME}"
      export GIT_DIR_WORK_TREE=1
      git init
      git remote add origin "https://github.com/cwebster2/dotfiles"
      git fetch --all
      git branch -f ${DOTFILESBRANCH} origin/${DOTFILESBRANCH}
      git checkout -f ${DOTFILESBRANCH}
      git pull origin ${DOTFILESBRANCH}
      git config status.showuntrackedfiles no
      git remote set-url origin "git@github.com:cwebster2/dotfiles"
    fi

  )
}

install_vim() {
  # create subshell
  (
    cd "$HOME"

    # install .vim files
    sudo rm -rf "${HOME}/.vim"
    sudo rm -rf "${HOME}/.config/nvim"
    git clone "https://github.com/cwebster2/vim" "${HOME}/.config/nvim"
    ln -s "${HOME}/.config/nvim" "${HOME}/.vim"
    cd "${HOME}/.config/nvim"
    git remote set-url origin git@github.com:cwebster2/vim
    git checkout nvim-lua

     # install neovim from source
     # bin/update-nvim.sh

     ln -s "${HOME}/.local/bin/nvim" "${HOME}/bin/nvim"
     ln -s "${HOME}/.local/bin/nvim" "${HOME}/bin/vim"
     ln -s "${HOME}/.local/bin/nvim" "${HOME}/bin/vi"
     ln -s "${HOME}/.local/bin/nvim" "${HOME}/bin/editor"

  )
}

bootstrap_vim() {
  (
    PACKER_DIRECTORY="${HOME}/.local/share/nvim/site/pack/packer/start/packer.nvim"

    if ! [ -d "$PACKER_DIRECTORY" ]; then
      git clone "https://github.com/wbthomason/packer.nvim" "$PACKER_DIRECTORY"
    fi

    "${HOME}"/.local/bin/nvim -u NONE --headless \
      +'autocmd User PackerComplete quitall' \
      +'lua require("plugins")' \
      +'lua require("packer").sync()'

    "${HOME}"/.config/nvim/lspinstall.sh all
    "${HOME}"/.config/nvim/dapinstall.sh all
  )
}

install_emacs() {
  (
    cd "$HOME"
    sudo rm -rf "${HOME}/.emacs.d"
    sudo rm -rf "${HOME}/.doom.d"
    git clone "https://github.com/hlissner/doom-emacs" "${HOME}/.emacs.d"
    git clone "https://github.com/cwebster2/.doom.d" "${HOME}/.doom.d"
    "${HOME}/.emacs.d/bin/doom" --yes install --no-env --no-fonts
    cd "${HOME}/.doom.d"
    git remote set-url origin git@github.com:cwebster2/.doom.d
  )
}

install_zsh() {
  (
    cd "$HOME"
    export RUNZSH=no
    export CHSH=no
    export KEEP_ZSHRC=yes
    sudo chsh -s $(command -v zsh) ${TARGET_USER}
    sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
    cd "${HOME}/.oh-my-zsh/custom/plugins"
    if  [ ! -d zsh-autosuggestions ]; then
      git clone https://github.com/zsh-users/zsh-autosuggestions zsh-autosuggestions
    fi
    if  [ ! -d zsh-lazyload ]; then
      git clone https://github.com/qoomon/zsh-lazyload zsh-lazyload
    fi
    cd "${HOME}/.oh-my-zsh/custom/themes"
  )
  echo "zsh installed"
  cd "$HOME"
}

install_fzf() {
  echo
  echo "Install fzf"
  echo
  (
    git clone --depth 1 https://github.com/junegunn/fzf.git ${HOME}/.fzf
    ${HOME}/.fzf/install --no-update-rc --key-bindings --completion
  )
}

install_delta() {
  echo
  echo "Configure delta"
  echo
  (
    git config --global core.pager 'delta --dark --plus-style=\"syntax #012800\" --minus-style=\"normal #340001\"'
  )
}

install_wm_status() {
  echo
  echo "Install i3status-rust"
  echo
  (
    mkdir -p "${HOME}/src"
    cd "${HOME}/src"
    git clone --depth 1 https://github.com/greshake/i3status-rust
    cd i3status-rust
    cargo install --path .
    ./install.sh
  )
}

install_ranger() {
  echo
  echo "Configure ranger"
  echo

  (
    echo "inode/directory=ranger.desktop" >> ${HOME}/.config/mimeapps.list
  )
}

install_docker_compose() {
  echo
  echo "Installing docker compose"
  echo
  (
    # download it.
    mkdir -p "${HOME}/.docker/cli-plugins"
    curl -sLo "$HOME"/.docker/cli-plugins/docker-compose https://github.com/docker/compose/releases/latest/download/docker-compose-linux-x86_64
    chmod 755 "${HOME}/.docker/cli-plugins/docker-compose"
  )
}

install_docker_cred_helper(){
  echo
  echo "Configure docker credential helper"
  echo
  (
    mkdir -p  ${HOME}/.docker
    cat <<- EOF > ${HOME}/.docker/config.json
    {
      "credsStore": "secretservice"
    }
EOF
  )
}

install_misc() {

  source ${HOME}/.env.d/zshenv.d/paths.zsh
  install_fzf
  install_delta
  install_wm_status
  install_ranger
  install_docker_compose
  install_docker_cred_helper

  echo
  echo "Setting up symlinks"
  echo
  (
    ln -s ${HOME}/.config/i3/i3exit.sh ${HOME}/bin
  )

  # echo
  # echo "Setting sleep timeouts"
  # echo
#   (
#     sudo gsettings set org.gnome.settings-daemon.plugins.power sleep-inactive-ac-timeout '0'
#     sudo gsettings set org.gnome.settings-daemon.plugins.power sleep-inactive-battery-timeout '10'

#     sudo bash -c "cat >> /etc/gdm3/greeter.dconf-defaults" << 'EOF'
# sleep-inactive-ac-timeout=0
# sleep-inactive-ac-type='nothing'
# EOF
#   )

  echo
  echo "Enabling the gpg agent sockets"
  echo
  (
    systemctl --user enable gpg-agent.socket
  )
}

install_terraform() {
  echo
  echo "Installing terraform"
  echo
  (
    mkdir -p "${HOME}/src"
    pushd "${HOME}/src" 2>/dev/null
    git clone --depth=1 https://github.com/tfutils/tfenv.git ~/.tfenv
    popd 2>/dev/null
    pushd "${HOME}/bin" 2>/dev/null
    ln -s "${HOME}/.tfenv/bin/terraform" .
    ln -s "${HOME}/.tfenv/bin/tfenv" .
    "${HOME}/bin/tfenv" install ${TERRAFORM_VERSION:-1.0.6}
    "${HOME}/bin/tfenv" use ${TERRAFORM_VERSION:-1.0.6}
    popd 2>/dev/null
  )
}

install_node() {
  echo
  echo "Installing node..."
  echo
  (
    eval "$(fnm env)"
    fnm install --lts
    # fnm use default
    npm install --silent -g \
      typescript \
      eslint \
      neovim \
      prettier \
      eslint_d \
      @bitwarden/cli
  )
}

install_deno() {
  echo
  echo "Installing deno..."
  echo
  (
    curl -fsSL https://deno.land/x/dvm/install.sh | sh
    zsh -i -c "dvm install"
  )
}

install_python() {
  echo
  echo "Installing python..."
  echo
  (
    cd ${HOME}
    wget -q https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda.sh
    bash ${HOME}/miniconda.sh -b -p ${HOME}/miniconda3
    rm ${HOME}/miniconda.sh
  )
  (
    source ${HOME}/miniconda3/bin/activate
    pip install --quiet neovim docker
    conda install -y psutil netifaces dbus-python pango
  )
}

install_tools() {
  # rust first, it install fnm, needed for node
  install_rust;
  export PATH=${HOME}/.cargo/bin:$PATH
  install_node;
  install_deno;
  install_python;
  install_golang;
  install_terraform;
  install_misc;

  echo "***"
  echo "*** Done Insalling Tools"
  echo "***"
}

setup_remote_access() {
  setup_gpg
  setup_sshd

  echo "***"
  echo "*** Remote key-based access is now configured"
  echo "***"
}
setup_sshd() {
  echo "***"
  echo "*** Setting up remote access via sshd"
  echo "***"

  sudo mkdir -p /etc/ssh/sshd_config.d
  cat <<-EOF >> /etc/ssh/sshd_config.d/99-local.conf
  AuthorizedKeysFile  .ssh/authorized_keys .ssh-persistant/authorized_keys
  PasswordAuthentication no
  ChallengeResponseAuthentication no
  AllowAgentForwarding yes
  X11Forwarding yes
  StreamLocalBindUnlink yes
EOF

  sudo sed -i '13s|^|Include /etc/ssh/sshd_config.d/*.conf\n\n|' /etc/ssh/sshd_config
}

setup_gpg() {
  echo "***"
  echo "*** Importing and trusting public key"
  echo "***"
  importKeyFromKeybase cwebster
  echo -e "5\ny\n" | gpg --command-fd 0 --expert --edit-key A58BCB66EEBB9327 trust
}

print_versions() {
  echo "***"
  echo "*** Versions"
  echo "***"
  python --version
  rustc --version
  cargo --version
  git --version
  echo -n "node "
  node --version
  echo -n "npm "
  npm --version
  terraform --version
  go version
  echo "***"
}

usage() {
  echo -e "install.sh\\n\\tThis script installs my basic setup for a laptop\\n"
  echo "Usage:"
  echo "  dotfiles                            - get dotfiles"
  echo "  vim                                 - install vim specific dotfiles"
  echo "  vim-bootstrap                       - install vim and plugins"
  echo "  emacs                               - install doom emacs and configuration"
  echo "  golang                              - install/update golang and packages"
  echo "  rust                                - install/update rust"
  echo "  python                              - install Python 3 (miniconda)"
  echo "  node                                - install node via fnm"
  echo "  scripts                             - install scripts"
  echo "  tools                               - install golang, rust, and scripts"
}

main() {
  local cmd=$1

  if [[ -z "$cmd" ]]; then
    usage
    exit 1
  fi

  if [[ $cmd == "dotfiles" ]]; then
    get_user
    install_dotfiles
  elif [[ $cmd == "vim" ]]; then
    install_vim
  elif [[ $cmd == "vim-bootstrap" ]]; then
    bootstrap_vim
  elif [[ $cmd == "emacs" ]]; then
    install_emacs
  elif [[ $cmd == "rust" ]]; then
    update_rust
  elif [[ $cmd == "node" ]]; then
    install_node
  elif [[ $cmd == "python" ]]; then
    install_python
  elif [[ $cmd == "golang" ]]; then
    install_golang "$2"
  elif [[ $cmd == "scripts" ]]; then
    install_scripts
  elif [[ $cmd == "tools" ]]; then
    install_tools
  elif [[ $cmd == "versions" ]]; then
    print_versions
  elif [[ $cmd == "updatezsh" ]]; then
    install_zsh
  else
    usage
  fi
}

main "$@"
